# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('MultiCoreSim', ['core',])
    module.source = [
        'model/IdGenerator.cc',
    	'model/MCoreSimProject.cc',
        'model/CpuCoreGenerator.cc',
        'model/PrivateCacheCtrl.cc',
        'model/SharedCacheCtrl.cc',
        'model/DRAMCtrl.cc',
        'model/BusArbiter.cc',
        'model/LatencyLogger.cc',
        'model/SNOOPPrivCohProtocol.cc',
        'model/PMSI.cc',
        'model/MSI.cc',
        'model/MESI.cc',
        'model/MOESI.cc',
    	'model/tinystr.cpp',
    	'model/tinyxml.cpp',
    	'model/tinyxmlerror.cpp',
    	'model/tinyxmlparser.cpp',
        ]

    module_test = bld.create_ns3_module_test_library('MultiCoreSim')
    module_test.source = [
        ]

    headers = bld(features='ns3header')
    headers.module = 'MultiCoreSim'
    headers.source = [
    	'model/tinystr.h',
    	'model/tinyxml.h',
        'model/IdGenerator.h',
        'model/CpuCoreGenerator.h',
        'model/PrivateCacheCtrl.h',
        'model/SharedCacheCtrl.h',
        'model/DRAMCtrl.h',
        'model/BusArbiter.h',
        'model/GenericCache.h',
        'model/IFCohProtocol.h',
        'model/SNOOPProtocolCommon.h',
        'model/SNOOPPrivCohProtocol.h',
        'model/CohProtocolCommon.h',
        'model/LatencyLogger.h',
        'model/MSI.h',
        'model/MESI.h',
        'model/MOESI.h',
        'model/PMSI.h',
        'model/L1BusCnfgXml.h',
    	'model/CacheXml.h',
        'model/MemTemplate.h',
    	'model/MCoreSimProject.h',
    	'model/MCoreSimProjectXml.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

